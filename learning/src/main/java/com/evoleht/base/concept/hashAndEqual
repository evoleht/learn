hashcode：JDK根据对象的地址或者字符串或者数字计算产生的一个int类型的哈希码。
哈希码并不是完全唯一的，它是一中算法，让类的对象按照自己的特征计算出尽量不同的哈希码，但不一定不同的对象哈希码不相同。
hashcode的实现主要是为了提高哈希表的性能。

hashcode 主要应用与集合中的一些操作

重要： 如果重写了equal方法一定要重写hashcode方法，如果不这样，则违反了Object.hashcode() 方法的通用约定，无法和一些基于散列值的集合类结合在一起使用。

equal 方法比较两个对象是否相同。

== 基本数据类型比较的是变量的值
   引用类型比较的是其引用对象的地址
   
   
hashcode 与 equal 区别：
1.没有重写的equal方法比较的是对象的引用地址，
重写之后的euqal 方法比较的是 对象的内容
2.hashcode主要应用于一些集合内
3.当有元素加入集合时，先会判断对象的hashcode是否相等，不相等则为不同的对象
相等的话，则调用equal方法判断内容是否相等。  

涉及的应用：set、map相关的集合操作


string 的equal 和 ==

==：
如果作用于基本数据类型的变量 时，比较的是其存储的值
如果作用引用对象则是比较的其引用对象的地址

equal：
euqal方法不可以作用于基本的数据类型，它是Object的方法
如果equal方法没有重写，则比较的是变量引用对象的地址。
像String、Date这种重写过equal方法，比较的是其引用对象的内容

基本数据类型的包装类型、String、 Date 都是重写过equal方法，比较的都是其应用对象存储的内容