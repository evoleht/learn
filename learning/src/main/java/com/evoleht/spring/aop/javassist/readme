如果我们实现了一个自定义类加载器，在类加载到JVM之前直接修改某些类的方法，
并将切入逻辑织入到这个方法里，然后将修改后的字节码文件交给虚拟机运行，那岂不是更直接

1.jpg

Javassist是一个编辑字节码的框架，可以让你很简单地操作字节码。它可以在运行期定义或修改Class

使用javassist实现aop的原理是在字节码加载前直接修改需要切入的方法。

这个比用cglib实现aop更加的高效

实现原理图 ----》2.jpg



从本节中可知，使用自定义的类加载器实现AOP在性能上要优于动态代理和Cglib，因为它不会产生新类，但是它仍然存在一个问题，就是如果其他的类加载器来加载类的话，这些类将不会被拦截



