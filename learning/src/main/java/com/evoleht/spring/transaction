一、事务的基本原理
一个数据库事务是一个被视为单一的工作单元序列，这些操作要么完整的执行，要么完全不执行。
基本属性：
1.原子性 ：事务应该当作一个单元的操作序列，整个序列操作，要么是成功的，要么是失败的。
2.一致性 ：
3.隔离性 ：事务之间是相互隔离的
4.持久性 ：一个事务一旦完成，事务的结果必须是永久性的，不能因为系统故障而从数据库中删除。


二、Spring 事务的传播属性

1.PROPAGATION_REQUIED 支持当前事务，加入当前正在执行的事务不在另一个事务里，那么就另起一个新事物。比如说
ServiceA.methodA的事务级别定义为PROPGATION_REQUIED 那么执行ServiceA.methodA时，已经起了事务，这时候
调用ServiceB.methodB。由于运行在ServiceA.methodA的事务内部，就不会在起一个事务。如果ServiceA.methodA
运行的时候没有在事务之中，SeriveB.methodB运行时会起一个事务，这样，在这两个方法内部的任何地方抛出异常，事务
都会回滚，即使B方法的事务已经被提交。

2.PROPGATION_SUPPORTS 如果当前在事务之中，即以事务的形态运行，如果不在一个事务之中，那么就以非事务的形态运行

3.PROPGATION_MANDATORY 必须在一个事务之中运行。也就是说，他只能被一个父事务调用。否则，他就抛出异常。

4.PROPGATION_REQUIED_NEW 
比如说ServiceA.methodA 的事务级别定义为PROPGATION_REQUIED, ServiceB.methodB的事务级别定义为
PROPGATION_REQUIED_NEW,那么当执行到ServiceB.methodB时，A方法的事务会挂起，方法B会新起一个事务，
那么就是存在两个不同的事务。如果方法B的事务已经提交，那么方法A失败回滚，B方法是不会回滚的，因为是两个不同的事务
如果方法B失败回滚，他抛出的异常被方法A捕捉到，那么方法A的事务仍然可以提交。

5.PROPGATION_NO_SUPPORTED 当前不支持事务。 如果方法A的食物级别是需要事务，方法B的事务级别是不支持事务
那么当执行到方法B时，事务会挂起，方法B以非事务状态执行完，再继续方法A的事务

6.PROPGATION_NEVER 不能在事务中运行。 假如方法A的事务级别是需要事务，方法B的事务级别是NEVER
则执行到方法B时，会抛出异常。

7.PROPGATION_NESTED 嵌套事务。和NEW不同的是，他与外层的事务是相依的，他的提交要等外层事务一起提交。也就是说
外层事务回滚的话，他也要回滚。


三、事务的隔离级别
1.Read uncommitted
读未提交，一个事务可以读取另一个未提交事务的数据。

容易产生脏读

2.Read committed
读提交，一个事务需要等另一个事务提交之后才读取数据。
解决脏读问题，但是还存在幻读、不可重复读

3.Repeatable red
重复读，在开始读取数据时，不允许修改操作。

4.Serializable 序列化
Serializable 是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读、幻读问题。 









