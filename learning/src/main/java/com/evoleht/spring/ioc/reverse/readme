需求增加了，要用不同的播放器，播放不同的文件，我们要抽象出来，减少耦合。
耦合关系就是依赖关系，如果依赖关系相当繁杂，牵一发而动全身，很难维护；
依赖关系越少，耦合关系就越低，系统就越稳定，所以我们要减少依赖

=====================依赖倒置============================

依赖倒置原则： 　　
A. 上层模块不应该依赖于下层模块，它们共同依赖于一个抽象。 　
B. 抽象不能依赖于具象，具象依赖于抽象。


理解：
A.上层是使用者，下层是被使用者，这就导致的结果是上层依赖下层了，
下层变动了，自然就会影响到上层了，导致系统不稳定，甚至是牵一发而动全身。
如何减少依赖？就是上层和下层都去依赖另一个抽象，这个抽象比较稳定，整个就来说就比较稳定了。

B.面向对象编程时面向抽象或者面向接口编程，抽象一般比较稳定，
实现抽象的具体肯定是要依赖抽象的，抽象不应该去依赖别的具体，应该依赖抽象。


代码重构：

1.Player依赖MediaFile，
so：让Player和MediaFile都去依赖一个抽象IMediaFile

2.MediaPlay依赖Player，
so：让MediaPlay和Player都依赖一个抽象IPlayer

3.MediaPlay依赖MediaFile，
so：让OperationMain和MediaFile都依赖一个抽象IMediaFile

4.IPlayer不能依赖具体MediaFile，应该依赖于具体MediaFile的抽象IMediaFile



代码进行了抽象，可以看到，目的是减少了依赖，但是看上去依赖关系增加了，
如用户PlayMedia方法，依赖还增加了依赖接口和具体的实现，
但是接口是稳定的，可以不考虑，具体的实现才是变动的，这个依赖还是要的，要播放文件，必定要用到具体的播放器和具体文件 

