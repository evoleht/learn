ioc中说到控制反转，是一个思想概念，但是也要具体实现的，
上面的配置文件也是一种实现方式。

依赖注入提出了具体的思想。
依赖注入DI是Dependency Injection缩写，它提出了“哪些东东的控制权被反转了，被转移了？”，它也给出了答案：“依赖对象的创建获得被反转”。
所谓依赖注入，就是由IoC容器在运行期间，动态地将某种依赖关系注入到对象之中。
ioc中的事例，哪些要依赖注入，依赖对象需要获得实例的地方，
即 PlayMedia方法，需要IPlayer具体对象和IMediaFile的具体对象，找到了地方就从这里下手，
为了灵活的控制这两个对象，必须是外面 能够控制着两个对象的实例化，提供对外的操作是必要的，可以是属性，可以是方法，可以是构造函数，
总之别的地方可以控制它。


依赖注入的三种方式：

1、接口注入
2、构造方法注入
3、setter注入

代码重构：
	MediaPlay类重构